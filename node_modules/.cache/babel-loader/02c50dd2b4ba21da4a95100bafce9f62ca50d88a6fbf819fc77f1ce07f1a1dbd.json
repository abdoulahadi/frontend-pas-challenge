{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pc\\\\Documents\\\\PROJET\\\\IA-PAS\\\\ner-application\\\\pas-frontend\\\\src\\\\NerViewer\\\\NERViewer.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n// import 'bootstrap/dist/css/bootstrap.min.css';\n\n// function NERViewer() {\n//   const [text, setText] = useState('');\n//   const [entities, setEntities] = useState([]);\n//   const [sentences, setSentences] = useState('');\n\n//   const handleTextChange = (event) => {\n//     setText(event.target.value);\n//   };\n\n//   const processText = async () => {\n//     try {\n//       // Effectuer une requête vers l'API\n//       const response = await fetch('http://localhost:8000/annotate-text', {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//         body: JSON.stringify({ text }), // Envoyer le texte saisi par l'utilisateur\n//       });\n\n//       if (response.ok) {\n//         const data = await response.json();\n//         setEntities(data.annotated_text.entities);\n//         setSentences(data.annotated_text.sentences); // Mettre à jour la phrase\n//       } else {\n//         console.error('La requête a échoué.');\n//       }\n//     } catch (error) {\n//       console.error('Erreur de communication avec l\\'API:', error);\n//     }\n//   };\n//   const renderTextWithEntities = () => {\n//     const textSegments = [];\n//     let currentIndex = 0;\n\n//     if (entities) {\n//       entities.forEach((entity, i) => {\n//         // Text avant l'entité\n//         textSegments.push(\n//           <span key={currentIndex} className=\"text-segment\">\n//             {sentences.slice(currentIndex, entity.start)}\n//           </span>\n//         );\n\n//         // Texte de l'entité avec mise en forme\n//         const colorClass = (() => {\n//           switch (entity.label) {\n//             case 'ORG':\n//               return 'bg-primary';\n//             case 'LOC':\n//               return 'bg-info';\n//             case 'PER':\n//               return 'bg-warning';\n//             case 'DATE':\n//               return 'bg-danger';\n//             default:\n//               return 'bg-success';\n//           }\n//         })();\n\n//         const entityText = (\n//           <span key={i} className={`badge ${colorClass} entity-badge`}>\n//             {entity.text} ({entity.label})\n//           </span>\n//         );\n\n//         textSegments.push(entityText);\n\n//         // Mettez à jour l'index actuel\n//         currentIndex = entity.end + 1;\n//       });\n//     }\n\n//     // Texte après la dernière entité\n//     textSegments.push(\n//       <span key=\"last-segment\" className=\"text-segment\">\n//         {sentences.slice(currentIndex)}\n//       </span>\n//     );\n\n//     return textSegments;\n//   };\n\n//   return (\n//     <div className=\"container\">\n//       <h2>XelKoom-IA NER</h2>\n//       <textarea\n//         rows=\"4\"\n//         placeholder=\"Entrez votre texte ici\"\n//         value={text}\n//         onChange={handleTextChange}\n//         className=\"form-control\"\n//       />\n//       <button onClick={processText} className=\"btn btn-primary mt-2\">\n//         Extraire les entités nommées\n//       </button>\n//       <div className=\"mt-3\">\n//         <p className=\"mb-2\">\n//           <strong>Phrase:</strong>\n//         </p>\n//         <p className=\"text-sentences\">{sentences}</p>\n//         <div className=\"entity-container mt-3\">{renderTextWithEntities()}</div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default NERViewer;\n\nimport React, { useState } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction NERViewer() {\n  _s();\n  const [text, setText] = useState('');\n  const [entities, setEntities] = useState([]);\n  const [sentences, setSentences] = useState('');\n  const [searchTerm, setSearchTerm] = useState('');\n  const [pdfFile, setPdfFile] = useState(null);\n  const handleTextChange = event => {\n    setText(event.target.value);\n  };\n  const handleSearchTermChange = event => {\n    setSearchTerm(event.target.value);\n  };\n  const handlePdfFileChange = event => {\n    setPdfFile(event.target.files[0]);\n  };\n  const processText = async () => {\n    try {\n      // Effectuer une requête vers l'API\n      const response = await fetch('http://localhost:8000/annotate-text', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          text\n        }) // Envoyer le texte saisi par l'utilisateur\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        setEntities(data.annotated_text.entities);\n        setSentences(data.annotated_text.sentences); // Mettre à jour la phrase\n      } else {\n        console.error('La requête a échoué.');\n      }\n    } catch (error) {\n      console.error('Erreur de communication avec l\\'API:', error);\n    }\n  };\n  const processPdf = async () => {\n    try {\n      if (!pdfFile) {\n        console.error('Veuillez sélectionner un fichier PDF.');\n        return;\n      }\n\n      // Créez un objet FormData pour envoyer le fichier PDF\n      const formData = new FormData();\n      formData.append('pdf_file', pdfFile);\n\n      // Effectuez une requête vers l'API pour annoter le PDF\n      const response = await fetch('http://localhost:8000/annotate-pdf', {\n        method: 'POST',\n        body: formData // Envoyez le formulaire avec le fichier PDF\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        setEntities(data.annotated_text.entities);\n        setSentences(data.annotated_text.sentences);\n      } else {\n        console.error('La requête a échoué.');\n      }\n    } catch (error) {\n      console.error('Erreur de communication avec l\\'API:', error);\n    }\n  };\n  const filterEntities = () => {\n    return entities.filter(entity => entity.text.toLowerCase().includes(searchTerm.toLowerCase()));\n  };\n  const renderTextWithEntities = () => {\n    const textSegments = [];\n    let currentIndex = 0;\n    const filteredEntities = filterEntities();\n    if (filteredEntities.length > 0) {\n      filteredEntities.forEach(entity => {\n        // Text avant l'entité\n        textSegments.push(sentences.slice(currentIndex, entity.start));\n\n        // Texte de l'entité avec mise en forme\n        const color = (() => {\n          switch (entity.label) {\n            case 'ORG':\n              return 'primary';\n            case 'LOC':\n              return 'info';\n            case 'PER':\n              return 'warning';\n            case 'DATE':\n              return 'danger';\n            default:\n              return 'success';\n          }\n        })();\n        const entityText = /*#__PURE__*/_jsxDEV(\"span\", {\n          className: `badge bg-${color}`,\n          children: [entity.text, \" (\", entity.label, \")\"]\n        }, currentIndex, true, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 11\n        }, this);\n        textSegments.push(entityText);\n\n        // Mettez à jour l'index actuel\n        currentIndex = entity.end + 2;\n      });\n    }\n\n    // Texte après la dernière entité\n    textSegments.push(sentences.slice(currentIndex));\n    return textSegments;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"XelKoom-IA NER\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"col m-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group row m-4\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          className: \"form-control\",\n          placeholder: \"Rechercher une entit\\xE9\",\n          value: searchTerm,\n          onChange: handleSearchTermChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row m-4\",\n        children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n          rows: \"4\",\n          placeholder: \"Entrez votre texte ici\",\n          value: text,\n          onChange: handleTextChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row m-4\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          accept: \".pdf\",\n          onChange: handlePdfFileChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row m-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: processText,\n          className: \"btn btn-primary\",\n          children: \"Extraire les entit\\xE9s nomm\\xE9es du texte\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: processPdf,\n          className: \"btn btn-primary\",\n          children: \"Extraire les entit\\xE9s nomm\\xE9es du PDF\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Phrase:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 11\n        }, this), \" \", sentences]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 9\n      }, this), renderTextWithEntities()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 238,\n    columnNumber: 5\n  }, this);\n}\n_s(NERViewer, \"vXFwf1vpWHNIWBISERkA5NAOyTs=\");\n_c = NERViewer;\nexport default NERViewer;\nvar _c;\n$RefreshReg$(_c, \"NERViewer\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","NERViewer","_s","text","setText","entities","setEntities","sentences","setSentences","searchTerm","setSearchTerm","pdfFile","setPdfFile","handleTextChange","event","target","value","handleSearchTermChange","handlePdfFileChange","files","processText","response","fetch","method","headers","body","JSON","stringify","ok","data","json","annotated_text","console","error","processPdf","formData","FormData","append","filterEntities","filter","entity","toLowerCase","includes","renderTextWithEntities","textSegments","currentIndex","filteredEntities","length","forEach","push","slice","start","color","label","entityText","className","children","fileName","_jsxFileName","lineNumber","columnNumber","end","type","placeholder","onChange","rows","accept","onClick","_c","$RefreshReg$"],"sources":["C:/Users/pc/Documents/PROJET/IA-PAS/ner-application/pas-frontend/src/NerViewer/NERViewer.jsx"],"sourcesContent":["// import React, { useState } from 'react';\r\n// import 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n// function NERViewer() {\r\n//   const [text, setText] = useState('');\r\n//   const [entities, setEntities] = useState([]);\r\n//   const [sentences, setSentences] = useState('');\r\n\r\n//   const handleTextChange = (event) => {\r\n//     setText(event.target.value);\r\n//   };\r\n\r\n//   const processText = async () => {\r\n//     try {\r\n//       // Effectuer une requête vers l'API\r\n//       const response = await fetch('http://localhost:8000/annotate-text', {\r\n//         method: 'POST',\r\n//         headers: {\r\n//           'Content-Type': 'application/json',\r\n//         },\r\n//         body: JSON.stringify({ text }), // Envoyer le texte saisi par l'utilisateur\r\n//       });\r\n\r\n//       if (response.ok) {\r\n//         const data = await response.json();\r\n//         setEntities(data.annotated_text.entities);\r\n//         setSentences(data.annotated_text.sentences); // Mettre à jour la phrase\r\n//       } else {\r\n//         console.error('La requête a échoué.');\r\n//       }\r\n//     } catch (error) {\r\n//       console.error('Erreur de communication avec l\\'API:', error);\r\n//     }\r\n//   };\r\n//   const renderTextWithEntities = () => {\r\n//     const textSegments = [];\r\n//     let currentIndex = 0;\r\n\r\n//     if (entities) {\r\n//       entities.forEach((entity, i) => {\r\n//         // Text avant l'entité\r\n//         textSegments.push(\r\n//           <span key={currentIndex} className=\"text-segment\">\r\n//             {sentences.slice(currentIndex, entity.start)}\r\n//           </span>\r\n//         );\r\n\r\n//         // Texte de l'entité avec mise en forme\r\n//         const colorClass = (() => {\r\n//           switch (entity.label) {\r\n//             case 'ORG':\r\n//               return 'bg-primary';\r\n//             case 'LOC':\r\n//               return 'bg-info';\r\n//             case 'PER':\r\n//               return 'bg-warning';\r\n//             case 'DATE':\r\n//               return 'bg-danger';\r\n//             default:\r\n//               return 'bg-success';\r\n//           }\r\n//         })();\r\n\r\n//         const entityText = (\r\n//           <span key={i} className={`badge ${colorClass} entity-badge`}>\r\n//             {entity.text} ({entity.label})\r\n//           </span>\r\n//         );\r\n\r\n//         textSegments.push(entityText);\r\n\r\n//         // Mettez à jour l'index actuel\r\n//         currentIndex = entity.end + 1;\r\n//       });\r\n//     }\r\n\r\n//     // Texte après la dernière entité\r\n//     textSegments.push(\r\n//       <span key=\"last-segment\" className=\"text-segment\">\r\n//         {sentences.slice(currentIndex)}\r\n//       </span>\r\n//     );\r\n\r\n//     return textSegments;\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"container\">\r\n//       <h2>XelKoom-IA NER</h2>\r\n//       <textarea\r\n//         rows=\"4\"\r\n//         placeholder=\"Entrez votre texte ici\"\r\n//         value={text}\r\n//         onChange={handleTextChange}\r\n//         className=\"form-control\"\r\n//       />\r\n//       <button onClick={processText} className=\"btn btn-primary mt-2\">\r\n//         Extraire les entités nommées\r\n//       </button>\r\n//       <div className=\"mt-3\">\r\n//         <p className=\"mb-2\">\r\n//           <strong>Phrase:</strong>\r\n//         </p>\r\n//         <p className=\"text-sentences\">{sentences}</p>\r\n//         <div className=\"entity-container mt-3\">{renderTextWithEntities()}</div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default NERViewer;\r\n\r\n\r\nimport React, { useState } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nfunction NERViewer() {\r\n  const [text, setText] = useState('');\r\n  const [entities, setEntities] = useState([]);\r\n  const [sentences, setSentences] = useState('');\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [pdfFile, setPdfFile] = useState(null);\r\n\r\n  const handleTextChange = (event) => {\r\n    setText(event.target.value);\r\n  };\r\n\r\n  const handleSearchTermChange = (event) => {\r\n    setSearchTerm(event.target.value);\r\n  };\r\n\r\n  const handlePdfFileChange = (event) => {\r\n    setPdfFile(event.target.files[0]); \r\n  };\r\n\r\n  const processText = async () => {\r\n    try {\r\n      // Effectuer une requête vers l'API\r\n      const response = await fetch('http://localhost:8000/annotate-text', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ text }), // Envoyer le texte saisi par l'utilisateur\r\n      });\r\n\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        setEntities(data.annotated_text.entities);\r\n        setSentences(data.annotated_text.sentences); // Mettre à jour la phrase\r\n      } else {\r\n        console.error('La requête a échoué.');\r\n      }\r\n    } catch (error) {\r\n      console.error('Erreur de communication avec l\\'API:', error);\r\n    }\r\n  };\r\n  const processPdf = async () => {\r\n    try {\r\n      if (!pdfFile) {\r\n        console.error('Veuillez sélectionner un fichier PDF.');\r\n        return;\r\n      }\r\n\r\n      // Créez un objet FormData pour envoyer le fichier PDF\r\n      const formData = new FormData();\r\n      formData.append('pdf_file', pdfFile);\r\n\r\n      // Effectuez une requête vers l'API pour annoter le PDF\r\n      const response = await fetch('http://localhost:8000/annotate-pdf', {\r\n        method: 'POST',\r\n        body: formData, // Envoyez le formulaire avec le fichier PDF\r\n      });\r\n\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        setEntities(data.annotated_text.entities);\r\n        setSentences(data.annotated_text.sentences);\r\n      } else {\r\n        console.error('La requête a échoué.');\r\n      }\r\n    } catch (error) {\r\n      console.error('Erreur de communication avec l\\'API:', error);\r\n    }\r\n  };\r\n\r\n  const filterEntities = () => {\r\n    return entities.filter((entity) =>\r\n      entity.text.toLowerCase().includes(searchTerm.toLowerCase())\r\n    );\r\n  };\r\n\r\n  const renderTextWithEntities = () => {\r\n    const textSegments = [];\r\n    let currentIndex = 0;\r\n\r\n    const filteredEntities = filterEntities();\r\n\r\n    if (filteredEntities.length > 0) {\r\n      filteredEntities.forEach((entity) => {\r\n        // Text avant l'entité\r\n        textSegments.push(sentences.slice(currentIndex, entity.start));\r\n\r\n        // Texte de l'entité avec mise en forme\r\n        const color = (() => {\r\n          switch (entity.label) {\r\n            case 'ORG':\r\n              return 'primary';\r\n            case 'LOC':\r\n              return 'info';\r\n            case 'PER':\r\n              return 'warning';\r\n            case 'DATE':\r\n              return 'danger';\r\n            default:\r\n              return 'success';\r\n          }\r\n        })();\r\n        const entityText = (\r\n          <span key={currentIndex} className={`badge bg-${color}`}>\r\n          {entity.text} ({entity.label}) \r\n          </span>\r\n        );\r\n        textSegments.push(entityText);\r\n\r\n        // Mettez à jour l'index actuel\r\n        currentIndex = entity.end + 2;\r\n      });\r\n    }\r\n\r\n    // Texte après la dernière entité\r\n    textSegments.push(sentences.slice(currentIndex));\r\n\r\n    return textSegments;\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h2>XelKoom-IA NER</h2>\r\n      <div className=\"col m-4\">\r\n        <div className=\"form-group row m-4\">\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            placeholder=\"Rechercher une entité\"\r\n            value={searchTerm}\r\n            onChange={handleSearchTermChange}\r\n          />\r\n        </div>\r\n        <div className='row m-4'>\r\n          <textarea\r\n            rows=\"4\"\r\n            placeholder=\"Entrez votre texte ici\"\r\n            value={text}\r\n            onChange={handleTextChange}\r\n          />\r\n        </div>\r\n        <div className=\"row m-4\">\r\n          <input\r\n            type=\"file\"\r\n            accept=\".pdf\"\r\n            onChange={handlePdfFileChange}\r\n          />\r\n        </div>\r\n        <div className=\"row m-4\">\r\n          <button onClick={processText} className=\"btn btn-primary\">\r\n            Extraire les entités nommées du texte\r\n          </button>\r\n          <button onClick={processPdf} className=\"btn btn-primary\">\r\n            Extraire les entités nommées du PDF\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <div className=\"mt-3\">\r\n        <p>\r\n          <strong>Phrase:</strong> {sentences}\r\n        </p>\r\n        {renderTextWithEntities()}\r\n      </div>\r\n    </div>\r\n  );\r\n  \r\n}\r\n\r\nexport default NERViewer;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}