{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pc\\\\Documents\\\\PROJET\\\\IA-PAS\\\\ner-application\\\\pas-frontend\\\\src\\\\NerViewer\\\\NERViewer.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './NERViewer.css';\nimport Navbar from '../Navbar/Navbar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction NERViewer() {\n  _s();\n  const [activeTab, setActiveTab] = useState('text'); // Par défaut, l'onglet actif est \"text\"\n  const [text, setText] = useState('');\n  const [entities, setEntities] = useState([]);\n  const [sentences, setSentences] = useState('');\n  const [searchTerm, setSearchTerm] = useState('');\n  const [pdfFile, setPdfFile] = useState(null);\n  const handleTabChange = tab => {\n    setActiveTab(tab);\n    setPdfFile(null);\n    setSentences(\"\");\n    setEntities([]);\n  };\n  const handleTextChange = event => {\n    setText(event.target.value);\n  };\n  const handleSearchTermChange = event => {\n    setSearchTerm(event.target.value);\n  };\n  const handlePdfFileChange = event => {\n    setPdfFile(event.target.files[0]);\n  };\n  const processText = async () => {\n    try {\n      // Effectuer une requête vers l'API\n      const response = await fetch('http://localhost:8000/annotate-text', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          text\n        }) // Envoyer le texte saisi par l'utilisateur\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        setEntities(data.annotated_text.entities);\n        setSentences(data.annotated_text.sentences); // Mettre à jour la phrase\n      } else {\n        console.error('La requête a échoué.');\n      }\n    } catch (error) {\n      console.error('Erreur de communication avec l\\'API:', error);\n    }\n  };\n  const processPdf = async () => {\n    try {\n      if (!pdfFile) {\n        console.error('Veuillez sélectionner un fichier PDF.');\n        return;\n      }\n\n      // Créez un objet FormData pour envoyer le fichier PDF\n      const formData = new FormData();\n      formData.append('pdf_file', pdfFile);\n\n      // Effectuez une requête vers l'API pour annoter le PDF\n      const response = await fetch('http://localhost:8000/annotate-pdf', {\n        method: 'POST',\n        body: formData // Envoyez le formulaire avec le fichier PDF\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        setEntities(data.annotated_text.entities);\n        setSentences(data.annotated_text.sentences);\n      } else {\n        console.error('La requête a échoué.');\n      }\n    } catch (error) {\n      console.error('Erreur de communication avec l\\'API:', error);\n    }\n  };\n  const filterEntities = () => {\n    return entities.filter(entity => entity.text.toLowerCase().includes(searchTerm.toLowerCase()));\n  };\n  const renderTextWithEntities = () => {\n    const textSegments = [];\n    let currentIndex = 0;\n    const filteredEntities = filterEntities();\n    if (filteredEntities.length > 0) {\n      filteredEntities.forEach(entity => {\n        // Text avant l'entité\n        textSegments.push(sentences.slice(currentIndex, entity.start));\n\n        // Texte de l'entité avec mise en forme\n        const color = (() => {\n          switch (entity.label) {\n            case 'ORG':\n              return 'primary';\n            case 'LOC':\n              return 'info';\n            case 'PER':\n              return 'warning';\n            case 'DATE':\n              return 'danger';\n            default:\n              return 'success';\n          }\n        })();\n        const entityText = /*#__PURE__*/_jsxDEV(\"span\", {\n          className: `badge bg-${color}`,\n          children: [entity.text, \" (\", entity.label, \")\"]\n        }, currentIndex, true, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this);\n        textSegments.push(entityText);\n\n        // Mettez à jour l'index actuel\n        currentIndex = entity.end;\n      });\n    }\n\n    // Texte après la dernière entité\n    textSegments.push(sentences.slice(currentIndex));\n    return textSegments;\n  };\n  const getEntityStatistics = () => {\n    const entityStats = {};\n    const mostFrequentEntities = {};\n    entities.forEach(entity => {\n      if (entity.label in entityStats) {\n        entityStats[entity.label] += 1;\n      } else {\n        entityStats[entity.label] = 1;\n      }\n      if (!mostFrequentEntities[entity.label] || entityStats[entity.label] > mostFrequentEntities[entity.label].count) {\n        mostFrequentEntities[entity.label] = {\n          entity: entity.text,\n          count: entityStats[entity.label]\n        };\n      }\n    });\n    return {\n      entityStats,\n      mostFrequentEntities\n    };\n  };\n  const {\n    entityStats,\n    mostFrequentEntities\n  } = getEntityStatistics();\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {\n      activeTab: activeTab,\n      onTabChange: handleTabChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container mt-2\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group row m-4\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          className: \"form-control\",\n          placeholder: \"Rechercher une entit\\xE9\",\n          value: searchTerm,\n          onChange: handleSearchTermChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 11\n      }, this), activeTab === 'text' ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col m-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row m-4\",\n          children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n            rows: \"4\",\n            placeholder: \"Entrez votre texte ici\",\n            value: text,\n            onChange: handleTextChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row m-4\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: processText,\n            className: \"btn btn-primary\",\n            children: \"Extraire les entit\\xE9s nomm\\xE9es du texte\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col m-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row m-4\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            accept: \".pdf\",\n            onChange: handlePdfFileChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row m-4\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: processPdf,\n            className: \"btn btn-primary\",\n            children: \"Extraire les entit\\xE9s nomm\\xE9es du PDF\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-0\",\n        children: sentences !== \"\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Phrase:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 11\n            }, this), \" \", sentences]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: renderTextWithEntities()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 7\n      }, this), Object.keys(entityStats).length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"entity-statistics\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Statistiques des entit\\xE9s\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: Object.keys(entityStats).map(label => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"most-frequent-entity\",\n              children: [label, \" (Entit\\xE9 la plus fr\\xE9quente: \", mostFrequentEntities[label].entity, \")\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 230,\n              columnNumber: 17\n            }, this), \": \", entityStats[label]]\n          }, label, true, {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n}\n_s(NERViewer, \"9SvBdpoD0dI0Fx0/z3hiVxxL0g0=\");\n_c = NERViewer;\nexport default NERViewer;\nvar _c;\n$RefreshReg$(_c, \"NERViewer\");","map":{"version":3,"names":["React","useState","Navbar","jsxDEV","_jsxDEV","Fragment","_Fragment","NERViewer","_s","activeTab","setActiveTab","text","setText","entities","setEntities","sentences","setSentences","searchTerm","setSearchTerm","pdfFile","setPdfFile","handleTabChange","tab","handleTextChange","event","target","value","handleSearchTermChange","handlePdfFileChange","files","processText","response","fetch","method","headers","body","JSON","stringify","ok","data","json","annotated_text","console","error","processPdf","formData","FormData","append","filterEntities","filter","entity","toLowerCase","includes","renderTextWithEntities","textSegments","currentIndex","filteredEntities","length","forEach","push","slice","start","color","label","entityText","className","children","fileName","_jsxFileName","lineNumber","columnNumber","end","getEntityStatistics","entityStats","mostFrequentEntities","count","onTabChange","type","placeholder","onChange","rows","onClick","accept","Object","keys","map","_c","$RefreshReg$"],"sources":["C:/Users/pc/Documents/PROJET/IA-PAS/ner-application/pas-frontend/src/NerViewer/NERViewer.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './NERViewer.css';\r\nimport Navbar from '../Navbar/Navbar'; \r\n\r\nfunction NERViewer() {\r\n  const [activeTab, setActiveTab] = useState('text'); // Par défaut, l'onglet actif est \"text\"\r\n  const [text, setText] = useState('');\r\n  const [entities, setEntities] = useState([]);\r\n  const [sentences, setSentences] = useState('');\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [pdfFile, setPdfFile] = useState(null);\r\n\r\n  const handleTabChange = (tab) => {\r\n    setActiveTab(tab);\r\n    setPdfFile(null);\r\n    setSentences(\"\");\r\n    setEntities([])\r\n  };\r\n\r\n  const handleTextChange = (event) => {\r\n    setText(event.target.value);\r\n  };\r\n\r\n  const handleSearchTermChange = (event) => {\r\n    setSearchTerm(event.target.value);\r\n  };\r\n\r\n  const handlePdfFileChange = (event) => {\r\n    setPdfFile(event.target.files[0]);\r\n  };\r\n\r\n  const processText = async () => {\r\n    try {\r\n      // Effectuer une requête vers l'API\r\n      const response = await fetch('http://localhost:8000/annotate-text', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ text }), // Envoyer le texte saisi par l'utilisateur\r\n      });\r\n\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        setEntities(data.annotated_text.entities);\r\n        setSentences(data.annotated_text.sentences); // Mettre à jour la phrase\r\n      } else {\r\n        console.error('La requête a échoué.');\r\n      }\r\n    } catch (error) {\r\n      console.error('Erreur de communication avec l\\'API:', error);\r\n    }\r\n  };\r\n\r\n  const processPdf = async () => {\r\n    try {\r\n      if (!pdfFile) {\r\n        console.error('Veuillez sélectionner un fichier PDF.');\r\n        return;\r\n      }\r\n\r\n      // Créez un objet FormData pour envoyer le fichier PDF\r\n      const formData = new FormData();\r\n      formData.append('pdf_file', pdfFile);\r\n\r\n      // Effectuez une requête vers l'API pour annoter le PDF\r\n      const response = await fetch('http://localhost:8000/annotate-pdf', {\r\n        method: 'POST',\r\n        body: formData, // Envoyez le formulaire avec le fichier PDF\r\n      });\r\n\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        setEntities(data.annotated_text.entities);\r\n        setSentences(data.annotated_text.sentences);\r\n      } else {\r\n        console.error('La requête a échoué.');\r\n      }\r\n    } catch (error) {\r\n      console.error('Erreur de communication avec l\\'API:', error);\r\n    }\r\n  };\r\n\r\n  const filterEntities = () => {\r\n    return entities.filter((entity) =>\r\n      entity.text.toLowerCase().includes(searchTerm.toLowerCase())\r\n    );\r\n  };\r\n\r\n  const renderTextWithEntities = () => {\r\n    const textSegments = [];\r\n    let currentIndex = 0;\r\n\r\n    const filteredEntities = filterEntities();\r\n\r\n    if (filteredEntities.length > 0) {\r\n      filteredEntities.forEach((entity) => {\r\n        // Text avant l'entité\r\n        textSegments.push(sentences.slice(currentIndex, entity.start));\r\n\r\n        // Texte de l'entité avec mise en forme\r\n        const color = (() => {\r\n          switch (entity.label) {\r\n            case 'ORG':\r\n              return 'primary';\r\n            case 'LOC':\r\n              return 'info';\r\n            case 'PER':\r\n              return 'warning';\r\n            case 'DATE':\r\n              return 'danger';\r\n            default:\r\n              return 'success';\r\n          }\r\n        })();\r\n        const entityText = (\r\n          <span key={currentIndex} className={`badge bg-${color}`}>\r\n            {entity.text} ({entity.label})\r\n          </span>\r\n        );\r\n        textSegments.push(entityText);\r\n\r\n        // Mettez à jour l'index actuel\r\n        currentIndex = entity.end;\r\n      });\r\n    }\r\n\r\n    // Texte après la dernière entité\r\n    textSegments.push(sentences.slice(currentIndex));\r\n\r\n    return textSegments;\r\n  };\r\n  const getEntityStatistics = () => {\r\n    const entityStats = {};\r\n    const mostFrequentEntities = {};\r\n  \r\n    entities.forEach((entity) => {\r\n      if (entity.label in entityStats) {\r\n        entityStats[entity.label] += 1;\r\n      } else {\r\n        entityStats[entity.label] = 1;\r\n      }\r\n  \r\n      if (!mostFrequentEntities[entity.label] || entityStats[entity.label] > mostFrequentEntities[entity.label].count) {\r\n        mostFrequentEntities[entity.label] = {\r\n          entity: entity.text,\r\n          count: entityStats[entity.label],\r\n        };\r\n      }\r\n    });\r\n  \r\n    return { entityStats, mostFrequentEntities };\r\n  };\r\n  \r\n\r\n  const { entityStats, mostFrequentEntities } = getEntityStatistics();\r\n\r\n  return (\r\n    <>\r\n      <Navbar activeTab={activeTab} onTabChange={handleTabChange} />\r\n    <div className=\"container mt-2\">\r\n          <div className=\"form-group row m-4\">\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              placeholder=\"Rechercher une entité\"\r\n              value={searchTerm}\r\n              onChange={handleSearchTermChange}\r\n            />\r\n          </div>\r\n      {activeTab === 'text' ? (\r\n        <div className=\"col m-4\">\r\n          <div className='row m-4'>\r\n            <textarea\r\n              rows=\"4\"\r\n              placeholder=\"Entrez votre texte ici\"\r\n              value={text}\r\n              onChange={handleTextChange}\r\n            />\r\n          </div>\r\n          <div className=\"row m-4\">\r\n            <button onClick={processText} className=\"btn btn-primary\">\r\n              Extraire les entités nommées du texte\r\n            </button>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <div className=\"col m-4\">\r\n          <div className=\"row m-4\">\r\n            <input\r\n              type=\"file\"\r\n              accept=\".pdf\"\r\n              onChange={handlePdfFileChange}\r\n            />\r\n          </div>\r\n          <div className=\"row m-4\">\r\n            <button onClick={processPdf} className=\"btn btn-primary\">\r\n              Extraire les entités nommées du PDF\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n      {/* {\r\n        sentences !==\"\" &&\r\n          <MessageBubbles userMessage={sentences} apiMessage={renderTextWithEntities()} />\r\n      } */}\r\n      <div className=\"mt-0\">\r\n        {\r\n          sentences!==\"\" && (\r\n            <>\r\n              <p>\r\n          <strong>Phrase:</strong> {sentences}\r\n        </p>\r\n        <p>\r\n          {renderTextWithEntities()}\r\n        </p>\r\n            </>\r\n        \r\n        )\r\n      }\r\n    \r\n      </div>\r\n      {Object.keys(entityStats).length > 0 && (\r\n        <div className=\"entity-statistics\">\r\n          <h3>Statistiques des entités</h3>\r\n          <ul>\r\n            {Object.keys(entityStats).map((label) => (\r\n              <li key={label}>\r\n                <span className=\"most-frequent-entity\">\r\n                  {label} (Entité la plus fréquente: {mostFrequentEntities[label].entity})\r\n                </span>: {entityStats[label]}\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      )}\r\n    </div>\r\n\r\n    </>\r\n  );\r\n}\r\n\r\nexport default NERViewer;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}