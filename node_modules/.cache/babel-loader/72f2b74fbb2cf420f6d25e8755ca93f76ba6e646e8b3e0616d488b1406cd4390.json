{"ast":null,"code":"// import React, { useState } from 'react';\n// import 'bootstrap/dist/css/bootstrap.min.css';\n\n// function NERViewer() {\n//   const [text, setText] = useState('');\n//   const [entities, setEntities] = useState([]);\n//   const [sentences, setSentences] = useState('');\n\n//   const handleTextChange = (event) => {\n//     setText(event.target.value);\n//   };\n\n//   const processText = async () => {\n//     try {\n//       // Effectuer une requête vers l'API\n//       const response = await fetch('http://localhost:8000/annotate-text', {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//         body: JSON.stringify({ text }), // Envoyer le texte saisi par l'utilisateur\n//       });\n\n//       if (response.ok) {\n//         const data = await response.json();\n//         setEntities(data.annotated_text.entities);\n//         setSentences(data.annotated_text.sentences); // Mettre à jour la phrase\n//       } else {\n//         console.error('La requête a échoué.');\n//       }\n//     } catch (error) {\n//       console.error('Erreur de communication avec l\\'API:', error);\n//     }\n//   };\n//   const renderTextWithEntities = () => {\n//     const textSegments = [];\n//     let currentIndex = 0;\n\n//     if (entities) {\n//       entities.forEach((entity, i) => {\n//         // Text avant l'entité\n//         textSegments.push(\n//           <span key={currentIndex} className=\"text-segment\">\n//             {sentences.slice(currentIndex, entity.start)}\n//           </span>\n//         );\n\n//         // Texte de l'entité avec mise en forme\n//         const colorClass = (() => {\n//           switch (entity.label) {\n//             case 'ORG':\n//               return 'bg-primary';\n//             case 'LOC':\n//               return 'bg-info';\n//             case 'PER':\n//               return 'bg-warning';\n//             case 'DATE':\n//               return 'bg-danger';\n//             default:\n//               return 'bg-success';\n//           }\n//         })();\n\n//         const entityText = (\n//           <span key={i} className={`badge ${colorClass} entity-badge`}>\n//             {entity.text} ({entity.label})\n//           </span>\n//         );\n\n//         textSegments.push(entityText);\n\n//         // Mettez à jour l'index actuel\n//         currentIndex = entity.end + 1;\n//       });\n//     }\n\n//     // Texte après la dernière entité\n//     textSegments.push(\n//       <span key=\"last-segment\" className=\"text-segment\">\n//         {sentences.slice(currentIndex)}\n//       </span>\n//     );\n\n//     return textSegments;\n//   };\n\n//   return (\n//     <div className=\"container\">\n//       <h2>XelKoom-IA NER</h2>\n//       <textarea\n//         rows=\"4\"\n//         placeholder=\"Entrez votre texte ici\"\n//         value={text}\n//         onChange={handleTextChange}\n//         className=\"form-control\"\n//       />\n//       <button onClick={processText} className=\"btn btn-primary mt-2\">\n//         Extraire les entités nommées\n//       </button>\n//       <div className=\"mt-3\">\n//         <p className=\"mb-2\">\n//           <strong>Phrase:</strong>\n//         </p>\n//         <p className=\"text-sentences\">{sentences}</p>\n//         <div className=\"entity-container mt-3\">{renderTextWithEntities()}</div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default NERViewer;","map":{"version":3,"names":[],"sources":["C:/Users/pc/Documents/PROJET/IA-PAS/ner-application/pas-frontend/src/NerViewer/NERViewer.jsx"],"sourcesContent":["// import React, { useState } from 'react';\r\n// import 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n// function NERViewer() {\r\n//   const [text, setText] = useState('');\r\n//   const [entities, setEntities] = useState([]);\r\n//   const [sentences, setSentences] = useState('');\r\n\r\n//   const handleTextChange = (event) => {\r\n//     setText(event.target.value);\r\n//   };\r\n\r\n//   const processText = async () => {\r\n//     try {\r\n//       // Effectuer une requête vers l'API\r\n//       const response = await fetch('http://localhost:8000/annotate-text', {\r\n//         method: 'POST',\r\n//         headers: {\r\n//           'Content-Type': 'application/json',\r\n//         },\r\n//         body: JSON.stringify({ text }), // Envoyer le texte saisi par l'utilisateur\r\n//       });\r\n\r\n//       if (response.ok) {\r\n//         const data = await response.json();\r\n//         setEntities(data.annotated_text.entities);\r\n//         setSentences(data.annotated_text.sentences); // Mettre à jour la phrase\r\n//       } else {\r\n//         console.error('La requête a échoué.');\r\n//       }\r\n//     } catch (error) {\r\n//       console.error('Erreur de communication avec l\\'API:', error);\r\n//     }\r\n//   };\r\n//   const renderTextWithEntities = () => {\r\n//     const textSegments = [];\r\n//     let currentIndex = 0;\r\n\r\n//     if (entities) {\r\n//       entities.forEach((entity, i) => {\r\n//         // Text avant l'entité\r\n//         textSegments.push(\r\n//           <span key={currentIndex} className=\"text-segment\">\r\n//             {sentences.slice(currentIndex, entity.start)}\r\n//           </span>\r\n//         );\r\n\r\n//         // Texte de l'entité avec mise en forme\r\n//         const colorClass = (() => {\r\n//           switch (entity.label) {\r\n//             case 'ORG':\r\n//               return 'bg-primary';\r\n//             case 'LOC':\r\n//               return 'bg-info';\r\n//             case 'PER':\r\n//               return 'bg-warning';\r\n//             case 'DATE':\r\n//               return 'bg-danger';\r\n//             default:\r\n//               return 'bg-success';\r\n//           }\r\n//         })();\r\n\r\n//         const entityText = (\r\n//           <span key={i} className={`badge ${colorClass} entity-badge`}>\r\n//             {entity.text} ({entity.label})\r\n//           </span>\r\n//         );\r\n\r\n//         textSegments.push(entityText);\r\n\r\n//         // Mettez à jour l'index actuel\r\n//         currentIndex = entity.end + 1;\r\n//       });\r\n//     }\r\n\r\n//     // Texte après la dernière entité\r\n//     textSegments.push(\r\n//       <span key=\"last-segment\" className=\"text-segment\">\r\n//         {sentences.slice(currentIndex)}\r\n//       </span>\r\n//     );\r\n\r\n//     return textSegments;\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"container\">\r\n//       <h2>XelKoom-IA NER</h2>\r\n//       <textarea\r\n//         rows=\"4\"\r\n//         placeholder=\"Entrez votre texte ici\"\r\n//         value={text}\r\n//         onChange={handleTextChange}\r\n//         className=\"form-control\"\r\n//       />\r\n//       <button onClick={processText} className=\"btn btn-primary mt-2\">\r\n//         Extraire les entités nommées\r\n//       </button>\r\n//       <div className=\"mt-3\">\r\n//         <p className=\"mb-2\">\r\n//           <strong>Phrase:</strong>\r\n//         </p>\r\n//         <p className=\"text-sentences\">{sentences}</p>\r\n//         <div className=\"entity-container mt-3\">{renderTextWithEntities()}</div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default NERViewer;\r\n"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}