{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pc\\\\Documents\\\\PROJET\\\\IA-PAS\\\\ner-application\\\\pas-frontend\\\\src\\\\NerViewer\\\\NERViewer.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction NERViewer() {\n  _s();\n  const [text, setText] = useState('Spacy est une bibliothèque Python pour le NLP. OpenAI est une entreprise de technologie.');\n  const [entities, setEntities] = useState([]);\n  const [sentences, setSentences] = useState('');\n  const handleTextChange = event => {\n    setText(event.target.value);\n  };\n  const processText = async () => {\n    try {\n      // Effectuer une requête vers l'API\n      const response = await fetch('http://localhost:8000/annotate-text', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          text\n        }) // Envoyer le texte saisi par l'utilisateur\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        setEntities(data.entities);\n        setSentences(data.sentences); // Mettre à jour la phrase\n        console.log(data);\n      } else {\n        console.error('La requête a échoué.');\n      }\n    } catch (error) {\n      console.error('Erreur de communication avec l\\'API:', error);\n    }\n  };\n  const renderTextWithEntities = () => {\n    const textSegments = [];\n    let currentIndex = 0;\n    if (entities) {\n      entities.forEach(entity => {\n        // Text avant l'entité\n        textSegments.push(text.slice(currentIndex, entity.start));\n\n        // Texte de l'entité avec mise en forme\n        const color = (() => {\n          switch (entity.label) {\n            case 'ORG':\n              return 'primary';\n            case 'LOC':\n              return 'info';\n            case 'PER':\n              return 'warning';\n            case 'DATE':\n              return 'danger';\n            default:\n              return 'success';\n          }\n        })();\n        const entityText = /*#__PURE__*/_jsxDEV(\"span\", {\n          className: `badge bg-${color}`,\n          children: [entity.text, \" (\", entity.label, \")\"]\n        }, currentIndex, true, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this);\n        textSegments.push(entityText);\n\n        // Mettez à jour l'index actuel\n        currentIndex = entity.end;\n      });\n    }\n\n    // Texte après la dernière entité\n    textSegments.push(text.slice(currentIndex));\n    return textSegments;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"XelKoom-IA NER\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      rows: \"4\",\n      placeholder: \"Entrez votre texte ici\",\n      value: text,\n      onChange: handleTextChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: processText,\n      className: \"btn btn-primary\",\n      children: \"Extraire les entit\\xE9s nomm\\xE9es\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Phrase:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 12\n        }, this), \" \", sentences]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), renderTextWithEntities()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n}\n_s(NERViewer, \"kpBWkp0VQWDfrwFIhliLn/vqTkI=\");\n_c = NERViewer;\nexport default NERViewer;\nvar _c;\n$RefreshReg$(_c, \"NERViewer\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","NERViewer","_s","text","setText","entities","setEntities","sentences","setSentences","handleTextChange","event","target","value","processText","response","fetch","method","headers","body","JSON","stringify","ok","data","json","console","log","error","renderTextWithEntities","textSegments","currentIndex","forEach","entity","push","slice","start","color","label","entityText","className","children","fileName","_jsxFileName","lineNumber","columnNumber","end","rows","placeholder","onChange","onClick","_c","$RefreshReg$"],"sources":["C:/Users/pc/Documents/PROJET/IA-PAS/ner-application/pas-frontend/src/NerViewer/NERViewer.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nfunction NERViewer() {\r\n  const [text, setText] = useState('Spacy est une bibliothèque Python pour le NLP. OpenAI est une entreprise de technologie.');\r\n  const [entities, setEntities] = useState([]);\r\n  const [sentences, setSentences] = useState('');\r\n\r\n  const handleTextChange = (event) => {\r\n    setText(event.target.value);\r\n  };\r\n\r\n  const processText = async () => {\r\n    try {\r\n      // Effectuer une requête vers l'API\r\n      const response = await fetch('http://localhost:8000/annotate-text', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ text }), // Envoyer le texte saisi par l'utilisateur\r\n      });\r\n\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        setEntities(data.entities);\r\n        setSentences(data.sentences); // Mettre à jour la phrase\r\n        console.log(data)\r\n      } else {\r\n        console.error('La requête a échoué.');\r\n      }\r\n    } catch (error) {\r\n      console.error('Erreur de communication avec l\\'API:', error);\r\n    }\r\n  };\r\n\r\n  const renderTextWithEntities = () => {\r\n    const textSegments = [];\r\n    let currentIndex = 0;\r\n  \r\n    if (entities) {\r\n      entities.forEach((entity) => {\r\n        // Text avant l'entité\r\n        textSegments.push(text.slice(currentIndex, entity.start));\r\n  \r\n        // Texte de l'entité avec mise en forme\r\n        const color = (() => {\r\n          switch (entity.label) {\r\n            case 'ORG':\r\n              return 'primary';\r\n            case 'LOC':\r\n              return 'info';\r\n            case 'PER':\r\n              return 'warning';\r\n            case 'DATE':\r\n              return 'danger';\r\n            default:\r\n              return 'success';\r\n          }\r\n        })();\r\n        const entityText = (\r\n          <span key={currentIndex} className={`badge bg-${color}`}>\r\n            {entity.text} ({entity.label})\r\n          </span>\r\n        );\r\n        textSegments.push(entityText);\r\n  \r\n        // Mettez à jour l'index actuel\r\n        currentIndex = entity.end;\r\n      });\r\n    }\r\n  \r\n    // Texte après la dernière entité\r\n    textSegments.push(text.slice(currentIndex));\r\n  \r\n    return textSegments;\r\n  };\r\n  \r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h2>XelKoom-IA NER</h2>\r\n      <textarea\r\n        rows=\"4\"\r\n        placeholder=\"Entrez votre texte ici\"\r\n        value={text}\r\n        onChange={handleTextChange}\r\n      />\r\n      <button onClick={processText} className=\"btn btn-primary\">\r\n        Extraire les entités nommées\r\n      </button>\r\n      <div className=\"mt-3\">\r\n        <p><strong>Phrase:</strong> {sentences}</p>\r\n        {renderTextWithEntities()}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NERViewer;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,sCAAsC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9C,SAASC,SAASA,CAAA,EAAG;EAAAC,EAAA;EACnB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGN,QAAQ,CAAC,0FAA0F,CAAC;EAC5H,MAAM,CAACO,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACS,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAE9C,MAAMW,gBAAgB,GAAIC,KAAK,IAAK;IAClCN,OAAO,CAACM,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;EAC7B,CAAC;EAED,MAAMC,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC9B,IAAI;MACF;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,qCAAqC,EAAE;QAClEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEjB;QAAK,CAAC,CAAC,CAAE;MAClC,CAAC,CAAC;;MAEF,IAAIW,QAAQ,CAACO,EAAE,EAAE;QACf,MAAMC,IAAI,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;QAClCjB,WAAW,CAACgB,IAAI,CAACjB,QAAQ,CAAC;QAC1BG,YAAY,CAACc,IAAI,CAACf,SAAS,CAAC,CAAC,CAAC;QAC9BiB,OAAO,CAACC,GAAG,CAACH,IAAI,CAAC;MACnB,CAAC,MAAM;QACLE,OAAO,CAACE,KAAK,CAAC,sBAAsB,CAAC;MACvC;IACF,CAAC,CAAC,OAAOA,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;IAC9D;EACF,CAAC;EAED,MAAMC,sBAAsB,GAAGA,CAAA,KAAM;IACnC,MAAMC,YAAY,GAAG,EAAE;IACvB,IAAIC,YAAY,GAAG,CAAC;IAEpB,IAAIxB,QAAQ,EAAE;MACZA,QAAQ,CAACyB,OAAO,CAAEC,MAAM,IAAK;QAC3B;QACAH,YAAY,CAACI,IAAI,CAAC7B,IAAI,CAAC8B,KAAK,CAACJ,YAAY,EAAEE,MAAM,CAACG,KAAK,CAAC,CAAC;;QAEzD;QACA,MAAMC,KAAK,GAAG,CAAC,MAAM;UACnB,QAAQJ,MAAM,CAACK,KAAK;YAClB,KAAK,KAAK;cACR,OAAO,SAAS;YAClB,KAAK,KAAK;cACR,OAAO,MAAM;YACf,KAAK,KAAK;cACR,OAAO,SAAS;YAClB,KAAK,MAAM;cACT,OAAO,QAAQ;YACjB;cACE,OAAO,SAAS;UACpB;QACF,CAAC,EAAE,CAAC;QACJ,MAAMC,UAAU,gBACdrC,OAAA;UAAyBsC,SAAS,EAAG,YAAWH,KAAM,EAAE;UAAAI,QAAA,GACrDR,MAAM,CAAC5B,IAAI,EAAC,IAAE,EAAC4B,MAAM,CAACK,KAAK,EAAC,GAC/B;QAAA,GAFWP,YAAY;UAAAW,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAEjB,CACP;QACDf,YAAY,CAACI,IAAI,CAACK,UAAU,CAAC;;QAE7B;QACAR,YAAY,GAAGE,MAAM,CAACa,GAAG;MAC3B,CAAC,CAAC;IACJ;;IAEA;IACAhB,YAAY,CAACI,IAAI,CAAC7B,IAAI,CAAC8B,KAAK,CAACJ,YAAY,CAAC,CAAC;IAE3C,OAAOD,YAAY;EACrB,CAAC;EAGD,oBACE5B,OAAA;IAAKsC,SAAS,EAAC,WAAW;IAAAC,QAAA,gBACxBvC,OAAA;MAAAuC,QAAA,EAAI;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACvB3C,OAAA;MACE6C,IAAI,EAAC,GAAG;MACRC,WAAW,EAAC,wBAAwB;MACpClC,KAAK,EAAET,IAAK;MACZ4C,QAAQ,EAAEtC;IAAiB;MAAA+B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5B,CAAC,eACF3C,OAAA;MAAQgD,OAAO,EAAEnC,WAAY;MAACyB,SAAS,EAAC,iBAAiB;MAAAC,QAAA,EAAC;IAE1D;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACT3C,OAAA;MAAKsC,SAAS,EAAC,MAAM;MAAAC,QAAA,gBACnBvC,OAAA;QAAAuC,QAAA,gBAAGvC,OAAA;UAAAuC,QAAA,EAAQ;QAAO;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,KAAC,EAACpC,SAAS;MAAA;QAAAiC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EAC1ChB,sBAAsB,CAAC,CAAC;IAAA;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtB,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAACzC,EAAA,CA9FQD,SAAS;AAAAgD,EAAA,GAAThD,SAAS;AAgGlB,eAAeA,SAAS;AAAC,IAAAgD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}