{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pc\\\\Documents\\\\PROJET\\\\IA-PAS\\\\ner-application\\\\pas-frontend\\\\src\\\\NerViewer\\\\NerViewer.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction NERViewer() {\n  _s();\n  const [text, setText] = useState('Spacy est une bibliothèque Python pour le NLP. OpenAI est une entreprise de technologie.');\n  const [entities, setEntities] = useState([]);\n  const handleTextChange = event => {\n    setText(event.target.value);\n  };\n  const processText = () => {\n    // Utilisez Spacy ou un service d'API pour extraire les entités nommées du texte\n    // Remplacez cette partie par l'appel à Spacy ou un service d'API de NLP\n    const extractedEntities = [{\n      text: 'Spacy',\n      label: 'ORG',\n      start: 0,\n      end: 5\n    }, {\n      text: 'Python',\n      label: 'LOC',\n      start: 26,\n      end: 33\n    }, {\n      text: 'OpenAI',\n      label: 'DATE',\n      start: 46,\n      end: 52\n    }, {\n      text: 'technologie',\n      label: 'PER',\n      start: 75,\n      end: 87\n    }];\n    setEntities(extractedEntities);\n  };\n  const renderTextWithEntities = () => {\n    const textSegments = [];\n    let currentIndex = 0;\n    entities.forEach(entity => {\n      // Text avant l'entité\n      textSegments.push(text.slice(currentIndex, entity.start));\n\n      // Texte de l'entité avec mise en forme\n      const color = (() => {\n        switch (entity.label) {\n          case 'ORG':\n            return 'primary';\n          case 'LOC':\n            return 'info';\n          // Vous pouvez choisir une classe Bootstrap différente pour LOC\n          case 'PER':\n            return 'warning';\n          // Vous pouvez choisir une classe Bootstrap différente pour PER\n          case 'DATE':\n            return 'danger';\n          // Vous pouvez choisir une classe Bootstrap différente pour DATE\n          default:\n            return 'success';\n          // Utilisez la classe par défaut pour d'autres entités\n        }\n      })();\n\n      const entityText = /*#__PURE__*/_jsxDEV(\"span\", {\n        className: `badge bg-${color}`,\n        children: [entity.text, \" (\", entity.label, \")\"]\n      }, currentIndex, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this);\n      textSegments.push(entityText);\n\n      // Mettez à jour l'index actuel\n      currentIndex = entity.end;\n    });\n\n    // Texte après la dernière entité\n    textSegments.push(text.slice(currentIndex));\n    return textSegments;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Entit\\xE9s Nomm\\xE9es avec ReactJS et Bootstrap\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      rows: \"4\",\n      placeholder: \"Entrez votre texte ici\",\n      value: text,\n      onChange: handleTextChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: processText,\n      className: \"btn btn-primary\",\n      children: \"Extraire les entit\\xE9s nomm\\xE9es\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-3\",\n      children: renderTextWithEntities()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n}\n_s(NERViewer, \"acksvJZnbphazwky3kOwVgD46GY=\");\n_c = NERViewer;\nexport default NERViewer;\nvar _c;\n$RefreshReg$(_c, \"NERViewer\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","NERViewer","_s","text","setText","entities","setEntities","handleTextChange","event","target","value","processText","extractedEntities","label","start","end","renderTextWithEntities","textSegments","currentIndex","forEach","entity","push","slice","color","entityText","className","children","fileName","_jsxFileName","lineNumber","columnNumber","rows","placeholder","onChange","onClick","_c","$RefreshReg$"],"sources":["C:/Users/pc/Documents/PROJET/IA-PAS/ner-application/pas-frontend/src/NerViewer/NerViewer.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nfunction NERViewer() {\r\n  const [text, setText] = useState('Spacy est une bibliothèque Python pour le NLP. OpenAI est une entreprise de technologie.');\r\n  const [entities, setEntities] = useState([]);\r\n\r\n  const handleTextChange = (event) => {\r\n    setText(event.target.value);\r\n  };\r\n\r\n  const processText = () => {\r\n    // Utilisez Spacy ou un service d'API pour extraire les entités nommées du texte\r\n    // Remplacez cette partie par l'appel à Spacy ou un service d'API de NLP\r\n    const extractedEntities = [\r\n        { text: 'Spacy', label: 'ORG', start: 0, end: 5 },\r\n        { text: 'Python', label: 'LOC', start: 26, end: 33 },\r\n        { text: 'OpenAI', label: 'DATE', start: 46, end: 52 },\r\n        { text: 'technologie', label: 'PER', start: 75, end: 87 },\r\n      ];\r\n      \r\n\r\n    setEntities(extractedEntities);\r\n  };\r\n\r\n  const renderTextWithEntities = () => {\r\n    const textSegments = [];\r\n    let currentIndex = 0;\r\n\r\n    entities.forEach((entity) => {\r\n      // Text avant l'entité\r\n      textSegments.push(text.slice(currentIndex, entity.start));\r\n\r\n      // Texte de l'entité avec mise en forme\r\n      const color = (() => {\r\n        switch (entity.label) {\r\n          case 'ORG':\r\n            return 'primary';\r\n          case 'LOC':\r\n            return 'info'; // Vous pouvez choisir une classe Bootstrap différente pour LOC\r\n          case 'PER':\r\n            return 'warning'; // Vous pouvez choisir une classe Bootstrap différente pour PER\r\n          case 'DATE':\r\n            return 'danger'; // Vous pouvez choisir une classe Bootstrap différente pour DATE\r\n          default:\r\n            return 'success'; // Utilisez la classe par défaut pour d'autres entités\r\n        }\r\n      })();\r\n      const entityText = (\r\n        <span key={currentIndex} className={`badge bg-${color}`}>\r\n          {entity.text} ({entity.label})\r\n        </span>\r\n      );\r\n      textSegments.push(entityText);\r\n\r\n      // Mettez à jour l'index actuel\r\n      currentIndex = entity.end;\r\n    });\r\n\r\n    // Texte après la dernière entité\r\n    textSegments.push(text.slice(currentIndex));\r\n\r\n    return textSegments;\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h2>Entités Nommées avec ReactJS et Bootstrap</h2>\r\n      <textarea\r\n        rows=\"4\"\r\n        placeholder=\"Entrez votre texte ici\"\r\n        value={text}\r\n        onChange={handleTextChange}\r\n      />\r\n      <button onClick={processText} className=\"btn btn-primary\">\r\n        Extraire les entités nommées\r\n      </button>\r\n      <div className=\"mt-3\">{renderTextWithEntities()}</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NERViewer;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}