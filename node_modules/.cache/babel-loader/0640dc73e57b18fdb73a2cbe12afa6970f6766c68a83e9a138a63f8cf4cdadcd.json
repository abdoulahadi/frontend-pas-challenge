{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pc\\\\Documents\\\\PROJET\\\\IA-PAS\\\\ner-application\\\\pas-frontend\\\\src\\\\NerViewer\\\\NERViewer.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction NERViewer() {\n  _s();\n  const [text, setText] = useState('');\n  const [entities, setEntities] = useState([]);\n  const [sentences, setSentences] = useState('');\n  const handleTextChange = event => {\n    setText(event.target.value);\n  };\n  const processText = async () => {\n    try {\n      // Effectuer une requête vers l'API\n      const response = await fetch('http://localhost:8000/annotate-text', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          text\n        }) // Envoyer le texte saisi par l'utilisateur\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        setEntities(data.annotated_text.entities);\n        setSentences(data.annotated_text.sentences); // Mettre à jour la phrase\n      } else {\n        console.error('La requête a échoué.');\n      }\n    } catch (error) {\n      console.error('Erreur de communication avec l\\'API:', error);\n    }\n  };\n  const renderTextWithEntities = () => {\n    const textSegments = [];\n    let currentIndex = 0;\n    if (entities) {\n      entities.forEach((entity, i) => {\n        // Text avant l'entité\n        textSegments.push( /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-segment\",\n          children: sentences.slice(currentIndex, entity.start)\n        }, currentIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }, this));\n\n        // Texte de l'entité avec mise en forme\n        const colorClass = (() => {\n          switch (entity.label) {\n            case 'ORG':\n              return 'bg-primary';\n            case 'LOC':\n              return 'bg-info';\n            case 'PER':\n              return 'bg-warning';\n            case 'DATE':\n              return 'bg-danger';\n            default:\n              return 'bg-success';\n          }\n        })();\n        const entityText = /*#__PURE__*/_jsxDEV(\"span\", {\n          className: `badge ${colorClass} entity-badge`,\n          children: [entity.text, \" (\", entity.label, \")\"]\n        }, currentIndex, true, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this);\n        textSegments.push(entityText);\n\n        // Mettez à jour l'index actuel\n        currentIndex = entity.end + 1;\n      });\n    }\n\n    // Texte après la dernière entité\n    textSegments.push( /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"text-segment\",\n      children: sentences.slice(currentIndex)\n    }, \"last-segment\", false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this));\n    return textSegments;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"XelKoom-IA NER\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      rows: \"4\",\n      placeholder: \"Entrez votre texte ici\",\n      value: text,\n      onChange: handleTextChange,\n      className: \"form-control\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: processText,\n      className: \"btn btn-primary mt-2\",\n      children: \"Extraire les entit\\xE9s nomm\\xE9es\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"mb-2\",\n        children: /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Phrase:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-sentences\",\n        children: sentences\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"entity-container mt-3\",\n        children: renderTextWithEntities()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n}\n_s(NERViewer, \"buW3L0CndH5Qg0b6BMiRazo8d4o=\");\n_c = NERViewer;\nexport default NERViewer;\nvar _c;\n$RefreshReg$(_c, \"NERViewer\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","NERViewer","_s","text","setText","entities","setEntities","sentences","setSentences","handleTextChange","event","target","value","processText","response","fetch","method","headers","body","JSON","stringify","ok","data","json","annotated_text","console","error","renderTextWithEntities","textSegments","currentIndex","forEach","entity","i","push","className","children","slice","start","fileName","_jsxFileName","lineNumber","columnNumber","colorClass","label","entityText","end","rows","placeholder","onChange","onClick","_c","$RefreshReg$"],"sources":["C:/Users/pc/Documents/PROJET/IA-PAS/ner-application/pas-frontend/src/NerViewer/NERViewer.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nfunction NERViewer() {\r\n  const [text, setText] = useState('');\r\n  const [entities, setEntities] = useState([]);\r\n  const [sentences, setSentences] = useState('');\r\n\r\n  const handleTextChange = (event) => {\r\n    setText(event.target.value);\r\n  };\r\n\r\n  const processText = async () => {\r\n    try {\r\n      // Effectuer une requête vers l'API\r\n      const response = await fetch('http://localhost:8000/annotate-text', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ text }), // Envoyer le texte saisi par l'utilisateur\r\n      });\r\n\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        setEntities(data.annotated_text.entities);\r\n        setSentences(data.annotated_text.sentences); // Mettre à jour la phrase\r\n      } else {\r\n        console.error('La requête a échoué.');\r\n      }\r\n    } catch (error) {\r\n      console.error('Erreur de communication avec l\\'API:', error);\r\n    }\r\n  };\r\n  const renderTextWithEntities = () => {\r\n    const textSegments = [];\r\n    let currentIndex = 0;\r\n\r\n    if (entities) {\r\n      entities.forEach((entity, i) => {\r\n        // Text avant l'entité\r\n        textSegments.push(\r\n          <span key={currentIndex} className=\"text-segment\">\r\n            {sentences.slice(currentIndex, entity.start)}\r\n          </span>\r\n        );\r\n\r\n        // Texte de l'entité avec mise en forme\r\n        const colorClass = (() => {\r\n          switch (entity.label) {\r\n            case 'ORG':\r\n              return 'bg-primary';\r\n            case 'LOC':\r\n              return 'bg-info';\r\n            case 'PER':\r\n              return 'bg-warning';\r\n            case 'DATE':\r\n              return 'bg-danger';\r\n            default:\r\n              return 'bg-success';\r\n          }\r\n        })();\r\n\r\n        const entityText = (\r\n          <span key={currentIndex} className={`badge ${colorClass} entity-badge`}>\r\n            {entity.text} ({entity.label})\r\n          </span>\r\n        );\r\n\r\n        textSegments.push(entityText);\r\n\r\n        // Mettez à jour l'index actuel\r\n        currentIndex = entity.end + 1;\r\n      });\r\n    }\r\n\r\n    // Texte après la dernière entité\r\n    textSegments.push(\r\n      <span key=\"last-segment\" className=\"text-segment\">\r\n        {sentences.slice(currentIndex)}\r\n      </span>\r\n    );\r\n\r\n    return textSegments;\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h2>XelKoom-IA NER</h2>\r\n      <textarea\r\n        rows=\"4\"\r\n        placeholder=\"Entrez votre texte ici\"\r\n        value={text}\r\n        onChange={handleTextChange}\r\n        className=\"form-control\"\r\n      />\r\n      <button onClick={processText} className=\"btn btn-primary mt-2\">\r\n        Extraire les entités nommées\r\n      </button>\r\n      <div className=\"mt-3\">\r\n        <p className=\"mb-2\">\r\n          <strong>Phrase:</strong>\r\n        </p>\r\n        <p className=\"text-sentences\">{sentences}</p>\r\n        <div className=\"entity-container mt-3\">{renderTextWithEntities()}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NERViewer;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}